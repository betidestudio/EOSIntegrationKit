<?xml version="1.0" encoding="utf-8"?>
<!-- Written by AvnishGameDev -->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="GooglePlayBilling APL Init"/>
		<setBool result="bSupported" value="false"/>
		<isArch arch="armeabi-v7a">
		  <setBool result="bSupported" value="true"/>
		</isArch>
		<isArch arch="arm64-v8a">
		  <setBool result="bSupported" value="true"/>
		</isArch>
		<isArch arch="x86">
		  <setBool result="bSupported" value="true"/>
		</isArch>
		<isArch arch="x86_64">
		  <setBool result="bSupported" value="true"/>
		</isArch>
		<if condition="android.compileSdkVersion &lt; 21">
			<true>
				<setBool result="bSupported" value="false"/>
				<log text="Unsupported API level: $S(android.compileSdkVersion). Minimum required is 21."/>
			</true>
		</if>
		<if condition="bSupported">
		  <false>
			<log text="Unsupported architecture: $S(Architecture)"/>
		  </false>
		</if>
	</init>
	
	<androidManifestUpdates>
		<addPermission android:name="android.permission.INTERNET"/>
		<addPermission android:name="android.permission.ACCESS_NETWORK_STATE"/>
	</androidManifestUpdates>

	<resourceCopies>
		<if condition="bSupported">
			<true>
				<log text="Copying playbilling.aar"/>
				<copyFile src="$S(PluginDir)/Android/libs/playbilling.aar" dst="$S(BuildDir)/libs/playbilling.aar" />
			</true>
		</if>
	</resourceCopies>

	<buildGradleAdditions>
		<if condition="bSupported">
		  <true>
			<insert>
				dependencies.implementation(name: 'playbilling', ext: 'aar')
				dependencies {
					implementation "com.android.billingclient:billing:7.1.1"
					implementation 'com.google.code.gson:gson:2.10.1'
				}
			</insert>
		  </true>
		</if>
	</buildGradleAdditions>

	<gameActivityImportAdditions>
		<if condition="bSupported">
			<true>
				<insert>
					import com.avnishgamedev.playbilling.*;
					import android.widget.Toast;
				</insert>
			</true>
		</if>
	</gameActivityImportAdditions>

	<gameActivityClassAdditions>
		<if condition="bSupported">
			<true>
				<insert>
				<![CDATA[
					BillingManager billingManager;

					public native void nativeOnPurchasesUpdated(boolean bSuccess, String[] purchasesJsons, String error);

					public native void nativeOnProductQueryResponse(boolean bSuccess, String[] productDetailsJsons, String error);
					public native void nativeOnPurchasesQueryResponse(boolean bSuccess, String[] purchasesJsons, String error);
					public native void nativeOnConsumeResponse(boolean bSuccess, String purchaseToken, String error);
					public native void nativeOnAcknowledgeResponse(boolean bSuccess, String purchaseToken, String error);

					public void AndroidThunkJava_GPBL_queryProduct(String productId, boolean bSubscription)
					{
						billingManager.queryProduct(productId, bSubscription, new PBProductQueryListener() {
							@Override
							public void onResult(boolean bSuccess, List<PBProductDetails> list, String error) {
								String[] jsonArray = (list == null) ? new String[0] : list.stream().map(PBProductDetails::toJson).toArray(String[]::new);
								nativeOnProductQueryResponse(bSuccess, jsonArray, error);
							}
						});
					}

					public void AndroidThunkJava_GPBL_queryPurchases(boolean bSubscription)
					{
						billingManager.queryPurchases(bSubscription, new PBQueryPurchasesResponseListener() {
							@Override
							public void onQueryResponse(boolean bSuccess, List<PBPurchase> purchases, String error) {
								String[] jsonArray = (purchases == null) ? new String[0] : purchases.stream().map(PBPurchase::toJson).toArray(String[]::new);
								nativeOnPurchasesQueryResponse(bSuccess, jsonArray, error);
							}
						});
					}

					public void AndroidThunkJava_GPBL_launchPurchaseFlow(String productDetailsJson, String offerToken)
					{
						PBProductDetails details = PBProductDetails.fromJson(productDetailsJson);
						billingManager.launchPurchaseFlow(details, offerToken.isEmpty() ? null : offerToken);
					}

					public void AndroidThunkJava_GPBL_consumePurchase(String purchaseToken)
					{
						billingManager.consumePurchase(purchaseToken, new PBConsumeResponseListener() {
							@Override
							public void onResponse(boolean bSuccess, String purchaseToken, String error) {
								nativeOnConsumeResponse(bSuccess, purchaseToken, error);
							}
						});
					}

					public void AndroidThunkJava_GPBL_acknowledgePurchase(String purchaseToken)
					{
						billingManager.acknowledgePurchase(purchaseToken, new PBAcknowledgePurchaseResponseListener() {
							@Override
							public void onResponse(boolean bSuccess, String purchaseToken, String error) {
								nativeOnAcknowledgeResponse(bSuccess, purchaseToken, error);
							}
						});
					}
				]]>
				</insert>
			</true>
		</if>
	</gameActivityClassAdditions>

	<gameActivityOnCreateAdditions>
		<if condition="bSupported">
			<true>
				<insert>
				<![CDATA[
					billingManager = new BillingManager(this, new PBBillingManagerStateListener() {
										@Override
										public void onReady() {
										}

										@Override
										public void onDisconnected() {
										}
									},
									new PBPurchasesUpdatedListener() {
										@Override
										public void onPurchasesUpdated(boolean bSuccess, List<PBPurchase> purchases, String error) {
											String[] jsonArray = (purchases == null) ? new String[0] : purchases.stream().map(PBPurchase::toJson).toArray(String[]::new);
											nativeOnPurchasesUpdated(bSuccess, jsonArray, error);
										}
									});
				]]>
				</insert>
			</true>
		</if>
	</gameActivityOnCreateAdditions>

	<gameActivityOnResumeAdditions>
		<if condition="bSupported">
			<true>
				<insert>
				billingManager.onResume();
				</insert>
			</true>
		</if>
	</gameActivityOnResumeAdditions>
  
</root>
